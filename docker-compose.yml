version: '3.10'
services:
  # Zookeper and Kafka
  zookeeper:
    image: 'bitnami/zookeeper:latest'
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ALLOW_ANONYMOUS_LOGIN: yes
    networks:
      - spring-network
    deploy:
      resources:
        limits:
          memory: 512M
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 2181"]
      interval: 30s
      timeout: 10s
      retries: 5

  kafka:
    image: 'bitnami/kafka:latest'
    user: root
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_LISTENERS: PLAINTEXT://:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      ALLOW_PLAINTEXT_LISTENER: 'yes'
      KAFKA_LOG_CLEANER_ENABLE: 'true'
      KAFKA_JVM_PERFORMANCE_OPTS: -XX:MaxMetaspaceSize=128m -Xss512k
    depends_on:
      zookeeper:
        condition: service_healthy
    networks:
      - spring-network
    deploy:
      resources:
        limits:
          memory: 3072MB
    oom_score_adj: -100
    healthcheck:
      test: ["CMD-SHELL", "/opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Observation with Prometheus, Grafana and Zipkin
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    networks:
      - spring-network
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    networks:
      - spring-network

  zipkin:
    image: openzipkin/zipkin:latest
    container_name: zipkin
    ports:
      - "9411:9411"
    networks:
      - spring-network

  #Service registry and Gateway
  eureka-server:
    image: emirhancebiroglu/eureka-server:latest
    container_name: eureka-server
    ports:
      - "8761:8761"
    networks:
      - spring-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761"]
      interval: 30s
      timeout: 10s
      retries: 5

  api-gateway:
    image: emirhancebiroglu/api-gateway:latest
    container_name: api-gateway
    ports:
      - "9191:8086"
    expose:
      - "9191"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      MANAGEMENT.ZIPKIN.TRACING.ENDPOINT: http://zipkin:9411/api/v2/spans
      LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY: TRACE
    depends_on:
      eureka-server:
        condition: service_healthy
    networks:
      - spring-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:8086/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  #Databases
  user-management-db:
    image: postgres:latest
    container_name: user-management-db
    environment:
      - POSTGRES_DB=user_management_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=2165
      - POSTGRES_SCHEMA=users
    ports:
      - "5433:5432"
    expose:
      - "5433"
    volumes:
      - ./user-management-db-init:/docker-entrypoint-initdb.d
    command: [ "postgres", "-c", "search_path=users" ]
    networks:
      - spring-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5

  jwt-auth-db:
    image: postgres:latest
    container_name: jwt-auth-db
    environment:
      - POSTGRES_DB=jwt_auth_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=2165
      - POSTGRES_SCHEMA=user-credentials
    ports:
      - "5434:5432"
    expose:
      - "5434"
    volumes:
      - ./jwt-auth-db-init:/docker-entrypoint-initdb.d
    command: [ "postgres", "-c", "search_path=user-credentials" ]
    networks:
      - spring-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5

  product-db:
    image: postgres:latest
    container_name: product-db
    environment:
      - POSTGRES_DB=product_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=2165
      - POSTGRES_SCHEMA=products
    ports:
      - "5435:5432"
    volumes:
      - ./product-db-init:/docker-entrypoint-initdb.d
    expose:
      - "5435"
    command: [ "postgres", "-c", "search_path=products" ]
    networks:
      - spring-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5

  sales-db:
    image: postgres:latest
    container_name: sales-db
    environment:
      - POSTGRES_DB=sales_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=2165
      - POSTGRES_SCHEMA=sales
    ports:
      - "5436:5432"
    volumes:
      - ./sales-db-init:/docker-entrypoint-initdb.d
    expose:
      - "5436"
    command: [ "postgres", "-c", "search_path=sales" ]
    networks:
      - spring-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5

  sales-reports-db:
    image: postgres:latest
    container_name: sales-reports-db
    environment:
      - POSTGRES_DB=sales_reports_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=2165
      - POSTGRES_SCHEMA=reports
    ports:
      - "5437:5432"
    volumes:
      - ./sales-reports-db-init:/docker-entrypoint-initdb.d
    expose:
      - "5437"
    command: [ "postgres", "-c", "search_path=reports" ]
    networks:
      - spring-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5

  #Services
  user-management-service:
    image: emirhancebiroglu/user_management_service:latest
    container_name: user-management-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
      MANAGEMENT.ZIPKIN.TRACING.ENDPOINT: http://zipkin:9411/api/v2/spans
    ports:
      - "8081:8081"
    depends_on:
      eureka-server:
        condition: service_healthy
      user-management-db:
        condition: service_healthy
      api-gateway:
        condition: service_healthy
      kafka:
        condition: service_healthy
      jwt-auth-service:
        condition: service_healthy
    networks:
      - spring-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  jwt-auth-service:
    image: emirhancebiroglu/jwt_auth_service:latest
    container_name: jwt-auth-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
      MANAGEMENT.ZIPKIN.TRACING.ENDPOINT: http://zipkin:9411/api/v2/spans
    ports:
      - "8082:8082"
    networks:
      - spring-network
    depends_on:
      eureka-server:
        condition: service_healthy
      jwt-auth-db:
        condition: service_healthy
      api-gateway:
        condition: service_healthy
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  product-service:
    image: emirhancebiroglu/product-service:latest
    container_name: product-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
      MANAGEMENT.ZIPKIN.TRACING.ENDPOINT: http://zipkin:9411/api/v2/spans
    ports:
      - "8083:8083"
    depends_on:
      eureka-server:
        condition: service_healthy
      product-db:
        condition: service_healthy
      api-gateway:
        condition: service_healthy
    networks:
      - spring-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
  
  sales-service:
    image: emirhancebiroglu/sales-service:latest
    container_name: sales-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
      MANAGEMENT.ZIPKIN.TRACING.ENDPOINT: http://zipkin:9411/api/v2/spans
    ports:
      - "8084:8084"
    depends_on:
      eureka-server:
        condition: service_healthy
      sales-db:
        condition: service_healthy
      api-gateway:
        condition: service_healthy
      kafka:
        condition: service_healthy
      reporting-service:
        condition: service_healthy
    networks:
      - spring-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8084/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  reporting-service:
    image: emirhancebiroglu/reporting-service:latest
    container_name: reporting-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
      MANAGEMENT.ZIPKIN.TRACING.ENDPOINT: http://zipkin:9411/api/v2/spans
    ports:
      - "8085:8085"
    depends_on:
      eureka-server:
        condition: service_healthy
      sales-reports-db:
        condition: service_healthy
      api-gateway:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - spring-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8085/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5

networks:
  spring-network:
    driver: bridge