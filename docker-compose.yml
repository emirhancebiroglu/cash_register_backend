version: '3.10'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - spring-network

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    networks:
      - spring-network

  eureka-server:
    image: emirhancebiroglu/eureka-server:latest
    container_name: eureka-server
    ports:
      - "8761:8761"
    networks:
      - spring-network

  api-gateway:
    image: emirhancebiroglu/api-gateway:latest
    container_name: api-gateway
    restart: always
    ports:
      - "9191:9090"
    expose:
      - "9191"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY= TRACE
    depends_on:
      - eureka-server
    networks:
      - spring-network

  user-management-db:
    image: postgres:latest
    container_name: user-management-db
    restart: always
    environment:
      - POSTGRES_DB=user_management_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=2165
      - POSTGRES_SCHEMA=users
    ports:
      - "5433:5432"
    expose:
      - "5433"
    volumes:
      - ./user-management-db-init:/docker-entrypoint-initdb.d
    command: [ "postgres", "-c", "search_path=users" ]
    networks:
      - spring-network

  jwt-auth-db:
    image: postgres:latest
    container_name: jwt-auth-db
    environment:
      - POSTGRES_DB=jwt_auth_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=2165
      - POSTGRES_SCHEMA=user-credentials
    restart: always
    ports:
      - "5434:5432"
    expose:
      - "5434"
    volumes:
      - ./jwt-auth-db-init:/docker-entrypoint-initdb.d
    command: [ "postgres", "-c", "search_path=user-credentials" ]
    networks:
      - spring-network

  product-db:
    image: postgres:latest
    container_name: product-db
    restart: always
    environment:
      - POSTGRES_DB=product_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=2165
      - POSTGRES_SCHEMA=products
    ports:
      - "5435:5432"
    volumes:
      - ./product-db-init:/docker-entrypoint-initdb.d
    expose:
      - "5435"
    command: [ "postgres", "-c", "search_path=products" ]
    networks:
      - spring-network

  sales-db:
    image: postgres:latest
    container_name: sales-db
    restart: always
    environment:
      - POSTGRES_DB=sales_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=2165
      - POSTGRES_SCHEMA=sales
    ports:
      - "5436:5432"
    volumes:
      - ./sales-db-init:/docker-entrypoint-initdb.d
    expose:
      - "5436"
    command: [ "postgres", "-c", "search_path=sales" ]
    networks:
      - spring-network

  sales-reports-db:
    image: postgres:latest
    container_name: sales-reports-db
    restart: always
    environment:
      - POSTGRES_DB=sales_reports_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=2165
      - POSTGRES_SCHEMA=reports
    ports:
      - "5437:5432"
    volumes:
      - ./sales-reports-db-init:/docker-entrypoint-initdb.d
    expose:
      - "5437"
    command: [ "postgres", "-c", "search_path=reports" ]
    networks:
      - spring-network

  user-management-service:
    image: emirhancebiroglu/user_management_service:latest
    container_name: user-management-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    ports:
      - "8081:8081"
    depends_on:
      - eureka-server
      - user-management-db
      - api-gateway
      - kafka
      - jwt-auth-service
    networks:
      - spring-network

  jwt-auth-service:
    image: emirhancebiroglu/jwt_auth_service:latest
    container_name: jwt-auth-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    ports:
      - "8082:8082"
    networks:
      - spring-network
    depends_on:
      - eureka-server
      - jwt-auth-db
      - api-gateway
      - kafka

  product-service:
    image: emirhancebiroglu/product-service:latest
    container_name: product-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    ports:
      - "8083:8083"
    depends_on:
      - eureka-server
      - product-db
      - api-gateway
    networks:
      - spring-network
  
  sales-service:
    image: emirhancebiroglu/sales-service:latest
    container_name: sales-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    ports:
      - "8084:8084"
    depends_on:
      - eureka-server
      - sales-reports-db
      - api-gateway
      - kafka
      - reporting-service
    networks:
      - spring-network

  reporting-service:
    image: emirhancebiroglu/reporting-service:latest
    container_name: reporting-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    ports:
      - "8085:8085"
    depends_on:
      - eureka-server
      - sales-db
      - api-gateway
      - kafka
    networks:
      - spring-network

networks:
  spring-network:
    driver: bridge